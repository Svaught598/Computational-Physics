{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Last Homework\n",
    "### Steven Vaught\n",
    "#### Problems 10.8, 10.9, 10.11, 10.12\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Problem 10.8\n",
    "Calculate a value for the integral\n",
    "\n",
    "$$\n",
    "I = \\int_0^1\\frac{x^{-1/2}}{e^x + 1}dx,\n",
    "$$\n",
    "\n",
    "using the importance sampling formula, Eq. 10.42, with $w(x)=x^{-1/2}$, as follows.\n",
    "\n",
    "#### Part A\n",
    "show that the probability distribution $p(x)$ from which the sample points should be drawn is given by:\n",
    "\n",
    "$$\n",
    "p(x) = \\frac{1}{2\\sqrt{x}}\n",
    "$$\n",
    "\n",
    "and derive a transformation for generating random numbers between zero and one from this distribution\n",
    "\n",
    "#### Part B\n",
    "Using your forumula, sample N = 1,000,000 random points and hence evaluate the integral. You should get a value close to around 0.84."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Part A Derivation:\n",
    "we know that the probability is given by:\n",
    "\n",
    "$$\n",
    "p(x) = \\frac{w(x)}{\\int_a^bw(x)dx}\n",
    "$$\n",
    "\n",
    "substituting what we are given, we get\n",
    "\n",
    "$$\n",
    "p(x) = \\frac{x^{-1/2}}{\\int_0^1x^{-1/2}dx}\n",
    "$$\n",
    "\n",
    "Carrying out the integration in the denominator:\n",
    "\n",
    "$$\n",
    "\\int_0^1x^{-1/2}dx = {2x^{1/2}}\\Biggr\\rvert_1^0 = 2\n",
    "$$\n",
    "\n",
    "Then the expression becomes $p(x) = \\frac{1}{2}x^{-1/2}$, or more simply:\n",
    "\n",
    "$$\n",
    "p(x) = \\frac{1}{2\\sqrt{x}}\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Integral is approx. ~0.83899\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Problem 10.8\n",
    "\n",
    "Integration with Importance Sampling\n",
    "\"\"\"\n",
    "import numpy as np\n",
    "\n",
    "N = 1000000\n",
    "f = lambda x: 1/(np.exp(x) + 1)\n",
    "I = sum(f(np.random.random(N)**2))/N*2\n",
    "print(f\"Integral is approx. ~{I:0.5f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "It seems like it either goes to 400 or -400 depending on the\n",
      "initial conditions of the grid. I assume that an intial net positive spin yields 400\n",
      "while an initial net negative magnetization yields -400. Either the spins all point\n",
      "up by the end, or they all point down. QED.\n",
      "\n",
      "Couldn't get animation to work, I included the code anyway.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Problem 10.9\n",
    "\n",
    "The Ising Model\n",
    "\"\"\"\n",
    "import numpy as np\n",
    "import numpy.random as rn\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.animation as animation\n",
    "\n",
    "\n",
    "\n",
    "\"\"\" Part A +++++++++++++++++++++++\"\"\"\n",
    "\n",
    "def calc_energy(s):\n",
    "    s1 = s[:-1,:]*s[1:,:]\n",
    "    s2 = s[:,:-1]*s[:,1:]\n",
    "    return -J*(np.sum(s1) + np.sum(s2))\n",
    "\n",
    "\"\"\" Part B & C ++++++++++++++++++\"\"\"\n",
    "\n",
    "# Constant Declaration\n",
    "#rn.seed(1)\n",
    "N = 20\n",
    "J = 1\n",
    "T = 1\n",
    "kb = 1\n",
    "beta = 1\n",
    "steps = 1000000\n",
    "\n",
    "# Initialization\n",
    "s = rn.choice([1, -1], size = (N,N), p = (0.5, 0.5))\n",
    "sum_list = []\n",
    "E1 = calc_energy(s)\n",
    "M = sum(s)\n",
    "\n",
    "# Loop over number of iterations\n",
    "for k in range(steps):\n",
    "    \n",
    "    # Random indices\n",
    "    i, j = rn.randint(N), rn.randint(N)\n",
    "    s[i,j] *= -1\n",
    "    \n",
    "    # get new energy & dE from spin flip\n",
    "    E2 = calc_energy(s)\n",
    "    dE = E2 - E1\n",
    "    \n",
    "    \n",
    "    \n",
    "    # if we gain energy from transition ...\n",
    "    if dE > 0:\n",
    "        # if probability is met, we use this transition\n",
    "        if rn.random() < np.exp(-beta * dE):\n",
    "            E1 = E2\n",
    "            M = np.sum(s)\n",
    "        # if probability is not met, we negate it\n",
    "        else: \n",
    "            s[i,j] *= -1\n",
    "    \n",
    "    \n",
    "    \n",
    "    # if we gain negative energy from transition...\n",
    "    else:\n",
    "        # we use this transition\n",
    "        E1 = E2\n",
    "        M = np.sum(s)\n",
    "        \n",
    "\n",
    "    sum_list.append(M)\n",
    "    \n",
    "# Plotting the stuff\n",
    "plt.plot(sum_list)\n",
    "plt.title(\"Total Magnetization\")\n",
    "plt.xlabel(\"Iterations\")\n",
    "plt.ylabel(\"Magnetization\")\n",
    "plt.show()\n",
    "\n",
    "\"\"\" Part D & E ++++++++++++++++++++++++++++\"\"\"\n",
    "\n",
    "\n",
    "print(\n",
    "\"\"\"\n",
    "It seems like it either goes to 400 or -400 depending on the\n",
    "initial conditions of the grid. I assume that an intial net positive spin yields 400\n",
    "while an initial net negative magnetization yields -400. Either the spins all point\n",
    "up by the end, or they all point down. QED.\n",
    "\n",
    "Couldn't get animation to work, I included the code anyway.\n",
    "\"\"\")\n",
    "\n",
    "\n",
    "\n",
    "# Main function\n",
    "def iterate(s):\n",
    "    E1 = calc_energy(s)\n",
    "    for k in range(steps):\n",
    "        i, j = rn.randint(N), rn.randint(N)\n",
    "        s[i,j] *= -1\n",
    "        E2 = calc_energy(s)\n",
    "        dE = E2 - E1\n",
    "        if dE > 0:\n",
    "            if rn.random() < np.exp(-beta * dE):\n",
    "                E1 = E2\n",
    "            else: \n",
    "                s[i,j] *= -1\n",
    "        else:\n",
    "            E1 = E2\n",
    "        yield s\n",
    "\n",
    "# Animation Initialization\n",
    "fig = plt.figure()\n",
    "ax = plt.axes()\n",
    "frame = ax.imshow(s)\n",
    "\n",
    "# Addding frames\n",
    "frame_list = []\n",
    "for p in iterate(s):\n",
    "    frame = ax.plot(p, \"b\")\n",
    "    frame_list.append(frame)\n",
    "\n",
    "# Showing animation\n",
    "anim = animation.ArtistAnimation(fig, frame_list, interval = 5, blit = True)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Problem 10.11 - The Dimer Covering Problem\n",
    "A well studied problem in condensed matter physics is the dimer covering problem in which dimers, meaning polymers with only two **MOLECULES**, land on the surface of a solid, falling in the spaces between the atoms on the surface and forming a grid like this:\n",
    "\n",
    "$$\n",
    "Pretend_there_is_a_picture_here\n",
    "$$\n",
    "\n",
    "blah blah blah rules and stuff\n",
    "\n",
    "#### Part A\n",
    "Write a program that solves the problem using simulated energy annealing on a 50X50 grid.\n",
    "\n",
    "#### Part B\n",
    "Try exponential cooling with different time constants\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Problem 10.11\n",
    "\n",
    "The Dimer Covering Problem\n",
    "\"\"\"\n",
    "import numpy as np\n",
    "import numpy.random as rn\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.animation as animation\n",
    "\n",
    "\n",
    "# Initialization\n",
    "N = 50\n",
    "n_dimers = 0\n",
    "Tmax = 1.0\n",
    "Tmin = 1e-3\n",
    "tau = 1e4\n",
    "lattice = np.zeros((50, 50), int)\n",
    "\n",
    "# Main Loop\n",
    "def iterate(lattice):\n",
    "\n",
    "    n_dimers = 0\n",
    "    Tmax = 10.0\n",
    "    Tmin = 1e-3\n",
    "    tau = 1e4\n",
    "    t = 0\n",
    "    T = Tmax\n",
    "\n",
    "    while T > Tmin:\n",
    "\n",
    "        # First Coords. of potential Dimer\n",
    "        x1, y1 = rn.randint(N, size = 2)\n",
    "\n",
    "        # Second Coords. of potential Dimer\n",
    "        ran = rn.random()\n",
    "        x2, y2 = x1, y1\n",
    "        if ran < 0.25:\n",
    "            x2 += 1\n",
    "        elif ran < 0.50:\n",
    "            x2 -= 1\n",
    "        elif ran < 0.75:\n",
    "            y2 += 1\n",
    "        elif ran < 1:\n",
    "            y2 -= 1\n",
    "\n",
    "\n",
    "\n",
    "        # if empty replace with Dimer\n",
    "        try:\n",
    "            if lattice[x1, y1] == 0 and lattice[x2, y2] == 0:\n",
    "                lattice[x1, y1] = lattice[x2, y2] = 1\n",
    "                n_dimers += 1\n",
    "\n",
    "            # if Dimer, replace with empty (based on probability p)\n",
    "            if lattice[x1, y1] == 1 and lattice[x2, y2] == 1:\n",
    "                if rn.random() < np.exp(-t/tau):\n",
    "                    lattice[x1, y1] = lattice[x2, y2] = 0\n",
    "                    n_dimers -= 1\n",
    "\n",
    "        except IndexError:\n",
    "            continue\n",
    "\n",
    "        # Cooling\n",
    "        t += 1\n",
    "        T = Tmax*np.exp(-t/tau)\n",
    "        \n",
    "        # yield grid for animation\n",
    "        yield lattice\n",
    "    \n",
    "\n",
    "# Animation Initialization\n",
    "fig = plt.figure()\n",
    "ax = plt.axes()\n",
    "\n",
    "# Addding frames\n",
    "frame_list = []\n",
    "i = 0\n",
    "for cells in iterate(lattice):\n",
    "    if i%100 ==0:\n",
    "        frame = ax.imshow(cells, cmap = \"seismic\", animated = True)\n",
    "        frame_list.append([frame])\n",
    "\n",
    "# Showing animation\n",
    "anim = animation.ArtistAnimation(\n",
    "    fig, \n",
    "    frame_list, \n",
    "    interval = 5, \n",
    "    blit = True,\n",
    "    repeat_delay = 1000\n",
    ")\n",
    "plt.show()\n",
    "\n",
    "\n",
    "coverage = 100*n_dimers/(N*N)\n",
    "print(\"Starting...\")\n",
    "print(f'Coverage Percentage is ~{coverage}')\n",
    "print(f'Number of Dimers is {n_dimers}')\n",
    "print('Couldn\"t get animation to work')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
